package week01

import scala.annotation.tailrec

object SqRoot {

  def abs(x: Double) = if (x < 0) -x else x

  def isGoodEnough(guess: Double, n: Double): Boolean =
    abs(guess * guess - n) < 0.001

  def isGoodEnoughMkII(guess: Double, n: Double): Boolean =
    abs(guess * guess - n) < (n * 0.001)

  def improve(guess: Double, n: Double): Double =
    (guess + n / guess) / 2

  def sqrt(n: Double): Double = {
    @tailrec
    def sqrtIter(guess: Double, n: Double): Double = {
      if (isGoodEnough(guess, n)) guess
      else sqrtIter(improve(guess, n), n)
    }

    sqrtIter(1.0, n)
  }

  def sqrtScan(n: Double): List[Double] = {
    @tailrec
    def sqrtIter(guess: Double, n: Double, acc: List[Double] = List()): List[Double] = {
      if (isGoodEnoughMkII(guess, n)) acc :+ guess
      else sqrtIter(improve(guess, n), n, acc :+ guess)
    }

    sqrtIter(1.0, n)
  }

  //  sqrt(25.0)
  //  println(sqrt(25.0))

  // Exercise
  // 1. Why is the `is good enough` test not precise for small numbers and why can it
  // lead to non-termination for very large numbers?

  // A: Because it doesn't take into account the original scale of the number,
  // for very small numbers to results are quite a bit out.
  // for very large numbers it will take a while to get that level of precision, that is probably not needed.

  // 2. can you define a different version of isGoodEnough that doesn't have
  // these problems?

  // 3. Here are some numbers to test your, your version, some very small and some very large numbers.
  // 0.001
  // 0.1e-20
  // 1.0e20
  // 1.0e50

  def main(args: Array[String]): Unit = {

// with original isGoodEnough.
// println(sqrtScan(25)) // List(1.0, 13.0, 7.461538461538462, 5.406026962727994, 5.015247601944898, 5.000023178253949)
// actual is 5, so good enough

// println(sqrtScan(0.001)) // List(1.0, 0.5005, 0.251249000999001, 0.12761455816345907, 0.06772532736082602, 0.04124542607499115)
// Actual value is 0.031622776601684, so .01 off!

// println(sqrtScan(0.1e-20)) //List(1.0, 0.5, 0.25, 0.125, 0.0625, 0.03125)
// Actual 0.0000000001

// println(sqrtScan(1.0e20))
/* List(1.0, 5.0E19, 2.5E19, 1.25E19, 6.25E18, 3.125E18, 1.5625E18, 7.8125E17, 3.9062500000000006E17, 1.9531250000000016E17, 9.7656250000000336E16, 4.882812500000068E16, 2.4414062500001364E16, 1.220703125000273E16, 6.103515625005461E15, 3.0517578125109225E15, 1.5258789062718452E15, 7.629394531686906E14, 3.814697266498813E14, 1.9073486345601266E14, 9.536743199015033E13, 4.7683716519363164E13, 2.3841859308257566E13, 1.192093175128066E13, 5.960470069943347E12, 2.9802434235718027E12, 1.4901384889389368E12, 7.451027983977584E11, 3.726185040334168E11, 1.8644343751597583E11, 9.348989660680984E10, 4.727976545279471E10, 2.4697417583458378E10, 1.437321195409579E10, 1.0665299546702797E10, 1.002075063550277E10, 1.0000021484861237E10, 1.0000000000023079E10, 1.0E10)
/*
 */
// takes a long time to get the level of precision required

// println(sqrtScan(1.0e50))
// ^ Start the fans please! does not return


// With good enough mkII
println(sqrtScan(25)) // (1.0, 13.0, 7.461538461538462, 5.406026962727994, 5.015247601944898, 5.000023178253949)
// actual is 5, so good enough

println(sqrtScan(0.001)) // (1.0, 0.5005, 0.251249000999001, 0.12761455816345907, 0.06772532736082602, 0.04124542607499115, 0.03274526934448864, 0.031642015868650786, 0.03162278245070105)
// Actual value is 0.031622776601684, so good!

println(sqrtScan(0.1e-20)) //ListList(1.0, 0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125, 0.00390625, 0.001953125, 9.765625000000002E-4, 4.882812500000007E-4, 2.4414062500000136E-4, 1.2207031250000274E-4, 6.103515625000546E-5, 3.051757812501092E-5, 1.5258789062521847E-5, 7.629394531293692E-6, 3.814697265712382E-6, 1.907348632987263E-6, 9.536743167557754E-7, 4.768371589021757E-7, 2.3841858049966386E-7, 1.1920929234698392E-7, 5.960465036779586E-8, 2.9802333572505143E-8, 1.4901183563462275E-8, 7.450625336112766E-9, 3.725379776517411E-9, 1.8628241027629963E-9, 9.316804610500537E-10, 4.663768952087924E-10, 2.3426054188079934E-10, 1.192646466059969E-10, 6.382468050380249E-11, 3.974630034466209E-11, 3.245293736420109E-11, 3.1633394544890125E-11)
// Actual 0.0000000001

println(sqrtScan(1.0e20)) // List(1.0, 5.0E19, 2.5E19, 1.25E19, 6.25E18, 3.125E18, 1.5625E18, 7.8125E17, 3.9062500000000006E17, 1.9531250000000016E17, 9.7656250000000336E16, 4.882812500000068E16, 2.4414062500001364E16, 1.220703125000273E16, 6.103515625005461E15, 3.0517578125109225E15, 1.5258789062718452E15, 7.629394531686906E14, 3.814697266498813E14, 1.9073486345601266E14, 9.536743199015033E13, 4.7683716519363164E13, 2.3841859308257566E13, 1.192093175128066E13, 5.960470069943347E12, 2.9802434235718027E12, 1.4901384889389368E12, 7.451027983977584E11, 3.726185040334168E11, 1.8644343751597583E11, 9.348989660680984E10, 4.727976545279471E10, 2.4697417583458378E10, 1.437321195409579E10, 1.0665299546702797E10, 1.002075063550277E10, 1.0000021484861237E10)


// This now terminates :)
println(sqrtScan(1.0e50))
//    List(1.0, 5.0E49, 2.5E49, 1.25E49, 6.25E48, 3.125E48, 1.5625E48, 7.8125E47, 3.90625E47, 1.953125E47, 9.765625E46, 4.8828125E46, 2.44140625E46, 1.220703125E46, 6.103515625E45, 3.0517578125E45, 1.52587890625E45, 7.62939453125E44, 3.814697265625E44, 1.9073486328125E44, 9.5367431640625E43, 4.76837158203125E43, 2.384185791015625E43, 1.1920928955078126E43, 5.960464477539063E42, 2.9802322387695315E42, 1.4901161193847657E42, 7.450580596923829E41, 3.725290298461914E41, 1.862645149230957E41, 9.313225746154786E40, 4.656612873077393E40, 2.3283064365386965E40, 1.1641532182693482E40, 5.820766091346741E39, 2.9103830456733706E39, 1.4551915228366853E39, 7.275957614183426E38, 3.637978807091713E38, 1.8189894035458566E38, 9.094947017729283E37, 4.547473508864642E37, 2.273736754432321E37, 1.1368683772161604E37, 5.684341886080802E36, 2.842170943040401E36, 1.4210854715202005E36, 7.105427357601002E35, 3.552713678800501E35, 1.7763568394002506E35, 8.881784197001253E34, 4.4408920985006265E34, 2.2204460492503133E34, 1.1102230246251566E34, 5.551115123125783E33, 2.7755575615628916E33, 1.3877787807814458E33, 6.938893903907229E32, 3.469446951953615E32, 1.734723475976809E32, 8.673617379884074E31, 4.336808689942095E31, 2.1684043449711626E31, 1.0842021724858119E31, 5.421010862433671E30, 2.710505431226059E30, 1.3552527156314762E30, 6.776263578526316E29, 3.388131790001028E29, 1.6940658964762534E29, 8.470329511896057E28, 4.23516481497761E28, 2.1175825255479648E28, 1.058791498892289E28, 5.293962216826523E27, 2.6469905531349943E27, 1.3235141659435625E27, 6.617948611847287E26, 3.3097298270516024E26, 1.6563756108519495E26, 8.312064444153693E25, 4.216185749922949E25, 2.2266834754845036E25, 1.3378909408530375E25, 1.0426680099342613E25, 1.000873029120681E25, 1.0000003807575104E25)

}
}
